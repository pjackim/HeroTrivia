{"ast":null,"code":"var _jsxFileName = \"/home/pjackim/coding/personal/comicGame/src/js/Board.js\";\nimport { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport '../css/Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: this.initGrid(),\n      hasWon: false\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  initGrid() {\n    /** It initializes grid with binary matrix */\n    let grid = [];\n\n    for (let y = 0; y < this.props.maxWordSize; y++) {\n      let row = [];\n\n      for (let x = 0; x < this.props.maxWordSize; x++) {\n        if (Math.random() < this.props.chanceLightsOn) row.push(1);else row.push(0);\n      }\n\n      grid.push(row);\n    }\n\n    return grid;\n  }\n\n  genGridCells() {\n    let grid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.grid;\n\n    // It returns the grid with cells by reading binary grid matrix of the state\n    function getRow(arr, rowIdx, obj) {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: arr.map((m, i) => /*#__PURE__*/_jsxDEV(Cell, {\n          mode: m,\n          pos: [rowIdx, i],\n          toggle: obj.toggle\n        }, `${rowIdx},${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 56\n        }, this))\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 20\n      }, this);\n    }\n\n    const gridCells = /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: grid.map((row, idx) => getRow(row, idx, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 27\n    }, this);\n\n    return gridCells;\n  }\n\n  toggle(pos) {\n    // It toggles the given grid position using setState\n    function duplicate(grid) {\n      let newGrid = grid.map(row => {\n        return [...row];\n      });\n      return newGrid;\n    }\n\n    this.setState(currSt => {\n      let newGrid = duplicate(currSt.grid);\n      const [row, col] = pos;\n\n      if (row >= 0 && row <= newGrid.length - 1 && col >= 0 && col <= newGrid.length - 1) {\n        if (newGrid[row][col]) {\n          newGrid[row][col] = 0;\n        } else {\n          newGrid[row][col] = 1;\n        }\n      }\n\n      let hasWon = newGrid.every(row => row.every(cell => !cell));\n      return {\n        grid: newGrid,\n        hasWon: hasWon\n      };\n    });\n  }\n\n  render() {\n    return this.state.hasWon ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-orange\",\n        children: \"you\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-blue\",\n        children: \"win\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Board-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"neon-orange\",\n          children: \"Hero\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"neon-blue\",\n          children: \"Trivia\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Board\",\n        children: this.genGridCells()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nBoard.defaultProps = {\n  maxWordSize: 7,\n  chanceLightsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/home/pjackim/coding/personal/comicGame/src/js/Board.js"],"names":["Component","Cell","Board","constructor","props","state","grid","initGrid","hasWon","toggle","bind","y","maxWordSize","row","x","Math","random","chanceLightsOn","push","genGridCells","getRow","arr","rowIdx","obj","map","m","i","gridCells","idx","pos","duplicate","newGrid","setState","currSt","col","length","every","cell","render","defaultProps"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport '../css/Board.css'\n\nclass Board extends Component{\n    static defaultProps = {\n        maxWordSize: 7,\n        chanceLightsOn:0.25\n    }\n    constructor(props){\n        super(props)\n        this.state = {\n            grid:this.initGrid(),\n            hasWon:false\n        }\n        this.toggle = this.toggle.bind(this)\n    }\n    initGrid(){\n        /** It initializes grid with binary matrix */\n        let grid = []\n        for(let y=0; y<this.props.maxWordSize; y++){\n            let row = []\n            for(let x=0; x<this.props.maxWordSize; x++){\n                if(Math.random() < this.props.chanceLightsOn) row.push(1)\n                else row.push(0)\n            }\n            grid.push(row)\n        }\n        return grid\n    }\n    genGridCells(grid = this.state.grid){\n        // It returns the grid with cells by reading binary grid matrix of the state\n        function getRow(arr, rowIdx, obj){\n            return <tr key={rowIdx}>{arr.map((m, i) => <Cell mode={m} key={`${rowIdx},${i}`} pos={[rowIdx,i]} toggle={obj.toggle}/>)}</tr>\n        }\n        const gridCells = <tbody>{grid.map((row, idx) => getRow(row, idx, this))}</tbody>\n\n        return gridCells\n    }\n    \n    toggle(pos){\n        // It toggles the given grid position using setState\n        function duplicate(grid){\n            let newGrid = grid.map(row=>{\n                return [...row]\n            })\n            return newGrid\n        }\n\n        this.setState(currSt=>{\n\n            let newGrid = duplicate(currSt.grid)\n            const [row, col] = pos\n\n            if((row>=0&&row<=newGrid.length-1) && (col>=0&&col<=newGrid.length-1)){\n                if(newGrid[row][col]){\n                    newGrid[row][col]=0\n                }\n                else{\n                    newGrid[row][col]=1\n                }\n            }\n\n            let hasWon = newGrid.every(row => row.every(cell => !cell))\n\n            return {\n                grid: newGrid,\n                hasWon: hasWon\n            }\n\n        })\n    }\n    \n\n        \n    render() {\n        \n        return (\n            this.state.hasWon\n            ? \n            <div className='winner'>\n                <div className='neon-orange'>you</div>\n                <div className='neon-blue'>win</div>\n            </div>\n            :\n            <div>\n                <div className='Board-title'>\n                    <div className='neon-orange'>Hero</div>\n                    <div className='neon-blue'>Trivia</div>\n                </div>\n                <table className='Board'>\n                    {this.genGridCells()}\n                </table>\n                \n            </div>\n        )\n    }\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}