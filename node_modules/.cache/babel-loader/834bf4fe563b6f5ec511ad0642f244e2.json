{"ast":null,"code":"var _jsxFileName = \"/home/pjackim/coding/personal/comicGame/src/js/Board.js\";\nimport Cell, { RenderCell } from \"./Cell\";\nimport '../css/Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  return /*#__PURE__*/_jsxDEV(RenderBoard, {\n    dimensions: getDimensions(props),\n    word: props.word,\n    data: props.data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 13\n  }, this);\n}\n_c = Board;\n\nfunction CreateBoard(props) {\n  var board = [];\n  var center = parseInt(props.dimensions.width / 2);\n  console.log(center); // Initialize Board\n\n  for (var col = 0; col < props.dimensions[\"height\"]; col++) {\n    var temp = [];\n    var answer = props.data[col][\"Answer\"];\n    var used = false;\n\n    for (var row = 0; row < props.dimensions[\"width\"]; row++) {\n      var context = {};\n\n      if (row < answer.length) {\n        context = Cell(answer[row], true, answer[row] == props.word[col] && !used);\n        if (answer[row] == props.word[col]) used = true;\n      } else context = Cell(\"\");\n\n      context.position = [col, row];\n      temp.push(context);\n    }\n\n    board.push(temp);\n  }\n\n  function getRow(arr, rowIdx) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: arr.map((m, i) => /*#__PURE__*/_jsxDEV(RenderCell, {\n        context: m\n      }, `${rowIdx},${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 36\n      }, this))\n    }, rowIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n  }\n\n  const gridCells = /*#__PURE__*/_jsxDEV(\"tbody\", {\n    children: board.map((row, idx) => getRow(row, idx))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 23\n  }, this);\n\n  return gridCells;\n}\n\n_c2 = CreateBoard;\n\nfunction RenderBoard(props) {\n  // return (\n  //     state.hasWon\n  //     ? \n  //     <div className='winner'>\n  //         <div className='neon-orange'>you</div>\n  //         <div className='neon-blue'>win</div>\n  //     </div>\n  //     :\n  //     <div>\n  //         <div className='Board-title'>\n  //             <div className='neon-orange'>Hero</div>\n  //             <div className='neon-blue'>Trivia</div>\n  //         </div>\n  //         <table className='Board'>\n  //             {genGridCells()}\n  //         </table>\n  //     </div>\n  // );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-orange\",\n        children: \"Hero\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-blue\",\n        children: \"Trivia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(CreateBoard, {\n        dimensions: props.dimensions,\n        word: props.word,\n        data: props.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_c3 = RenderBoard;\n\nfunction getDimensions(props) {\n  var width = 0,\n      height = 0;\n  height = props.word.length;\n  props.data.forEach(element => {\n    if (width < element[\"Answer\"].length) width = element[\"Answer\"].length;\n  });\n  return {\n    \"width\": width * 2,\n    \"height\": height\n  };\n}\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"CreateBoard\");\n$RefreshReg$(_c3, \"RenderBoard\");","map":{"version":3,"sources":["/home/pjackim/coding/personal/comicGame/src/js/Board.js"],"names":["Cell","RenderCell","Board","props","getDimensions","word","data","CreateBoard","board","center","parseInt","dimensions","width","console","log","col","temp","answer","used","row","context","length","position","push","getRow","arr","rowIdx","map","m","i","gridCells","idx","RenderBoard","height","forEach","element"],"mappings":"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","sourcesContent":["import Cell, { RenderCell } from \"./Cell\";\nimport '../css/Board.css'\n\n\nexport default function Board(props) {\n    return (<RenderBoard dimensions={getDimensions(props)} word={props.word} data={props.data}/>);\n}\n\n\nfunction CreateBoard(props) {\n    var board = [];\n    var center = parseInt(props.dimensions.width / 2);\n    console.log(center);\n    \n    // Initialize Board\n    for (var col = 0; col < props.dimensions[\"height\"]; col++) {\n        var temp = [];\n        var answer = props.data[col][\"Answer\"];\n        var used = false;\n\n\n        for (var row = 0; row < props.dimensions[\"width\"]; row++) {\n            var context = {};\n            \n            if (row < answer.length) {\n                context = Cell(answer[row], true, answer[row] == props.word[col] && !used);\n                if (answer[row] == props.word[col])\n                    used = true;\n            } else\n                context = Cell(\"\");\n\n            context.position = [col, row];\n            temp.push(context);\n        }\n\n        board.push(temp);\n    }\n\n    function getRow(arr, rowIdx){\n        return (\n            <tr key={rowIdx}>\n                {arr.map((m, i) => <RenderCell context={m} key={`${rowIdx},${i}`}/> )}\n            </tr>);\n    }\n\n    const gridCells = <tbody>{board.map((row, idx) => getRow(row, idx))}</tbody>\n    return gridCells;\n}\n\n\nfunction RenderBoard(props) {\n    // return (\n    //     state.hasWon\n    //     ? \n    //     <div className='winner'>\n    //         <div className='neon-orange'>you</div>\n    //         <div className='neon-blue'>win</div>\n    //     </div>\n    //     :\n    //     <div>\n    //         <div className='Board-title'>\n    //             <div className='neon-orange'>Hero</div>\n    //             <div className='neon-blue'>Trivia</div>\n    //         </div>\n    //         <table className='Board'>\n    //             {genGridCells()}\n    //         </table>\n            \n    //     </div>\n    // );\n\n    return (\n        <div>\n            <div className='Board-title'>\n                <div className='neon-orange'>Hero</div>\n                <div className='neon-blue'>Trivia</div>\n            </div>\n            <table className='Board'>\n                <CreateBoard dimensions={props.dimensions} word={props.word} data={props.data}/>\n            </table>\n            \n        </div>\n    );\n}\n\nfunction getDimensions(props) {\n    var width = 0, height = 0;\n    height = props.word.length;\n\n    props.data.forEach(element => {\n        if (width < element[\"Answer\"].length)\n            width = element[\"Answer\"].length;\n    });\n    return {\"width\": width * 2, \"height\": height};\n}"]},"metadata":{},"sourceType":"module"}