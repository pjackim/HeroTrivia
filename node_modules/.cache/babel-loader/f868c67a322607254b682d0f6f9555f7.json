{"ast":null,"code":"var _jsxFileName = \"/home/pjackim/coding/personal/comicGame/src/js/Board.js\";\nimport { Component, useEffect } from \"react\";\nimport Cell, { RenderCell } from \"./Cell\";\nimport '../css/Board.css';\nimport { AddFileListener } from \"./ProcessData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  var dimensions = getDimensions(props);\n  return /*#__PURE__*/_jsxDEV(RenderBoard, {\n    dimensions: dimensions,\n    word: props.word,\n    data: props.data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 13\n  }, this);\n}\n_c = Board;\n\nfunction CreateBoard(props) {\n  var board = [];\n  var center = parseInt(props.dimensions.width / 2);\n  var t = \"hshdh\"; // Initialize Board\n\n  for (var i = 0; i < props.dimensions[\"height\"]; i++) {\n    var temp = [];\n    var answer = props.data[i][\"Answer\"];\n\n    for (var j = 0; j < props.dimensions[\"width\"]; j++) {\n      var context = {};\n\n      if (j < answer.length) {\n        context = Cell(answer[j], true, answer[j] == props.word[i]);\n      } else context = Cell(\"\");\n\n      context.position = [i, j];\n      temp.push(context);\n    }\n\n    board.push(temp);\n  }\n\n  function getRow(arr, rowIdx) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: arr.map((m, i) => /*#__PURE__*/_jsxDEV(RenderCell, {\n        context: m\n      }, `${rowIdx},${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 36\n      }, this))\n    }, rowIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n  }\n\n  const gridCells = /*#__PURE__*/_jsxDEV(\"tbody\", {\n    children: board.map((row, idx) => getRow(row, idx))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 23\n  }, this);\n\n  return gridCells;\n}\n\n_c2 = CreateBoard;\n\nfunction ToggleBoardPosition() {}\n\n_c3 = ToggleBoardPosition;\n\nfunction RenderBoard(props) {\n  // return (\n  //     state.hasWon\n  //     ? \n  //     <div className='winner'>\n  //         <div className='neon-orange'>you</div>\n  //         <div className='neon-blue'>win</div>\n  //     </div>\n  //     :\n  //     <div>\n  //         <div className='Board-title'>\n  //             <div className='neon-orange'>Hero</div>\n  //             <div className='neon-blue'>Trivia</div>\n  //         </div>\n  //         <table className='Board'>\n  //             {genGridCells()}\n  //         </table>\n  //     </div>\n  // );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-orange\",\n        children: \"Hero\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-blue\",\n        children: \"Trivia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(CreateBoard, {\n        dimensions: props.dimensions,\n        word: props.word,\n        data: props.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_c4 = RenderBoard;\n\nfunction getDimensions(props) {\n  var width = 0,\n      height = 0;\n  height = props.word.length;\n  props.data.forEach(element => {\n    if (width < element[\"Answer\"].length) width = element[\"Answer\"].length;\n  });\n  return {\n    \"width\": width,\n    \"height\": height\n  };\n}\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"CreateBoard\");\n$RefreshReg$(_c3, \"ToggleBoardPosition\");\n$RefreshReg$(_c4, \"RenderBoard\");","map":{"version":3,"sources":["/home/pjackim/coding/personal/comicGame/src/js/Board.js"],"names":["Component","useEffect","Cell","RenderCell","AddFileListener","Board","props","dimensions","getDimensions","word","data","CreateBoard","board","center","parseInt","width","t","i","temp","answer","j","context","length","position","push","getRow","arr","rowIdx","map","m","gridCells","row","idx","ToggleBoardPosition","RenderBoard","height","forEach","element"],"mappings":"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","sourcesContent":["import { Component, useEffect } from \"react\";\nimport Cell, { RenderCell } from \"./Cell\";\nimport '../css/Board.css'\nimport { AddFileListener } from \"./ProcessData\";\n\n\nexport default function Board(props) {\n    var dimensions = getDimensions(props);\n\n    return (<RenderBoard dimensions={dimensions} word={props.word} data={props.data}/>);\n}\n\nfunction CreateBoard(props) {\n    var board = [];\n    var center = parseInt(props.dimensions.width / 2);\n    var t = \"hshdh\";\n    \n    // Initialize Board\n    for (var i = 0; i < props.dimensions[\"height\"]; i++) {\n        var temp = [];\n        var answer = props.data[i][\"Answer\"];\n\n\n        for (var j = 0; j < props.dimensions[\"width\"]; j++) {\n            var context = {};\n            \n            if (j < answer.length) {\n                context = Cell(answer[j], true, answer[j] == props.word[i]);\n            } else\n                context = Cell(\"\");\n\n            context.position = [i, j];\n            temp.push(context);\n        }\n\n        board.push(temp);\n    }\n\n    function getRow(arr, rowIdx){\n        return (\n            <tr key={rowIdx}>\n                {arr.map((m, i) => <RenderCell context={m} key={`${rowIdx},${i}`}/> )}\n            </tr>);\n    }\n\n    const gridCells = <tbody>{board.map((row, idx) => getRow(row, idx))}</tbody>\n    return gridCells;\n}\n\nfunction ToggleBoardPosition() {\n\n}\n\n\nfunction RenderBoard(props) {\n    // return (\n    //     state.hasWon\n    //     ? \n    //     <div className='winner'>\n    //         <div className='neon-orange'>you</div>\n    //         <div className='neon-blue'>win</div>\n    //     </div>\n    //     :\n    //     <div>\n    //         <div className='Board-title'>\n    //             <div className='neon-orange'>Hero</div>\n    //             <div className='neon-blue'>Trivia</div>\n    //         </div>\n    //         <table className='Board'>\n    //             {genGridCells()}\n    //         </table>\n            \n    //     </div>\n    // );\n\n    return (\n        <div>\n            <div className='Board-title'>\n                <div className='neon-orange'>Hero</div>\n                <div className='neon-blue'>Trivia</div>\n            </div>\n            <table className='Board'>\n            {/* <th></th> */}\n                    <CreateBoard dimensions={props.dimensions} word={props.word} data={props.data}/>\n            </table>\n            \n        </div>\n    );\n}\n\nfunction getDimensions(props) {\n    var width = 0, height = 0;\n    height = props.word.length;\n\n    props.data.forEach(element => {\n        if (width < element[\"Answer\"].length)\n            width = element[\"Answer\"].length;\n    });\n    return {\"width\": width, \"height\": height};\n}"]},"metadata":{},"sourceType":"module"}