{"ast":null,"code":"var _jsxFileName = \"/home/pjackim/coding/personal/comicGame/src/js/ProcessData.js\";\nimport * as Papa from 'papaparse';\nimport { dataBase } from '../data/data';\nimport { word } from './Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var data = [];\nexport function SelectFile() {\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"file\",\n    id: \"file-selector\",\n    accept: \".csv\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 13\n  }, this);\n}\n_c = SelectFile;\nexport function AddFileListener() {\n  const fileSelector = document.getElementById('file-selector');\n  fileSelector.addEventListener('change', event => {\n    const fileList = event.target.files;\n    loadFile(fileList[0]);\n  });\n}\n_c2 = AddFileListener;\nexport async function loadFile(fileObject) {\n  const reader = new FileReader();\n  reader.readAsText(fileObject, \"UTF-8\");\n\n  reader.onload = event => {\n    Papa.parse(event.target.result, {\n      header: true,\n      complete: function (CSVFilePlaces) {\n        data = CSVFilePlaces.data;\n        console.log(JSON.stringify(data, null, 2)); // printData([data]);\n      }\n    });\n  };\n}\nexport function printData(arr) {\n  arr.forEach(element => {\n    if (element[\"Question\"].length > 0) console.log(JSON.stringify(element, null, 2));\n  });\n}\n\nfunction findEntries(letter) {\n  var entries = [];\n  dataBase.forEach(entry => {\n    let position = entry[\"Answer\"].indexOf(letter);\n    if (position > -1) entries.push(entry);\n  });\n  return entries;\n}\n\nfunction findSmallest(count, data) {\n  var entries = [];\n  data.forEach(element => {\n    if (entries.length != count) entries.push(element);else {\n      for (var i = 0; i < entries.length; i++) {\n        if (entries[i][\"Answer\"].length > element[\"Answer\"].length) entries[i] = element;\n      }\n    }\n  });\n  return entries;\n}\n\nexport function findAllEntries(word) {\n  let long = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var entries = [];\n  var wordsUsed = [];\n  [...word].forEach(letter => {\n    var options = findEntries(letter);\n    var smallestElement = options[options.length - 1]; // Get Smallest word for each letter\n\n    var temp = findSmallest(3, options);\n    var index = parseInt(Math.random() * 100 % temp.length);\n    var entryData = {};\n\n    if (long) {\n      entryData = {\n        \"Letter\": letter,\n        \"Index\": options[index][\"Answer\"].indexOf(letter),\n        \"Question\": options[index][\"Question\"],\n        \"Answer\": options[index][\"Answer\"],\n        \"Answer Letters\": options[index][\"Answer Letters\"],\n        \"Question Letters\": options[index][\"Question Letters\"],\n        \"Category\": options[index][\"Category\"],\n        \"Publisher\": options[index][\"Publisher\"],\n        \"Series\": options[index][\"Series\"],\n        \"Universe\": options[index][\"Universe\"],\n        \"Difficulty\": options[index][\"Difficulty\"]\n      };\n    } else {\n      entryData = {\n        \"Letter\": letter,\n        \"Index\": options[index][\"Answer\"].indexOf(letter),\n        \"Question\": options[index][\"Question\"],\n        \"Answer\": options[index][\"Answer\"]\n      };\n    }\n\n    entries.push(entryData);\n  });\n  return entries;\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SelectFile\");\n$RefreshReg$(_c2, \"AddFileListener\");","map":{"version":3,"sources":["/home/pjackim/coding/personal/comicGame/src/js/ProcessData.js"],"names":["Papa","dataBase","word","data","SelectFile","AddFileListener","fileSelector","document","getElementById","addEventListener","event","fileList","target","files","loadFile","fileObject","reader","FileReader","readAsText","onload","parse","result","header","complete","CSVFilePlaces","console","log","JSON","stringify","printData","arr","forEach","element","length","findEntries","letter","entries","entry","position","indexOf","push","findSmallest","count","i","findAllEntries","long","wordsUsed","options","smallestElement","temp","index","parseInt","Math","random","entryData"],"mappings":"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","sourcesContent":["import * as Papa from 'papaparse';\nimport { dataBase } from '../data/data';\nimport { word } from './Board';\n\nexport var data = [];\n\nexport function SelectFile() {\n    return (<input type=\"file\" id=\"file-selector\" accept=\".csv\"/>);\n}\n\nexport function AddFileListener() {\n    const fileSelector = document.getElementById('file-selector');\n    fileSelector.addEventListener('change', (event) => {\n      const fileList = event.target.files;\n      loadFile(fileList[0]);\n    });\n}\n\nexport async function loadFile(fileObject){\n    const reader = new FileReader();\n    reader.readAsText(fileObject, \"UTF-8\");\n    reader.onload = event => {\n\n        Papa.parse(event.target.result, {\n            header: true,\n            complete: function(CSVFilePlaces) {\n                data = CSVFilePlaces.data;\n                console.log(JSON.stringify(data, null, 2));\n                // printData([data]);\n            }\n        });\n    };\n}\n\n\n\nexport function printData(arr) {\n    arr.forEach(element => {\n        if (element[\"Question\"].length > 0)\n            console.log(JSON.stringify(element, null, 2));\n    });\n}\n\nfunction findEntries(letter) {\n    var entries = [];\n\n    dataBase.forEach(entry => {\n        let position = entry[\"Answer\"].indexOf(letter);\n\n        if (position > -1)\n            entries.push(entry);\n    });\n    return entries;\n}\n\nfunction findSmallest(count, data) {\n    var entries = [];\n\n    data.forEach(element => {\n        if (entries.length != count)\n            entries.push(element)\n        else {\n            for (var i = 0; i < entries.length; i++) {\n                if (entries[i][\"Answer\"].length > element[\"Answer\"].length)\n                    entries[i] = element;\n            }\n        }\n    });\n    return entries;\n}\n\nexport function findAllEntries(word, long = false) {\n    var entries = [];\n    var wordsUsed = [];\n\n    [...word].forEach(letter => {\n        var options = findEntries(letter);\n        var smallestElement = options[options.length - 1];\n\n        // Get Smallest word for each letter\n        var temp = findSmallest(3, options);\n\n        var index = parseInt((Math.random() * 100) % temp.length);\n        var entryData = {}\n\n        if (long) {\n            entryData = {\n                \"Letter\":           letter,\n                \"Index\":            options[index][\"Answer\"].indexOf(letter),\n                \"Question\":         options[index][\"Question\"],\n                \"Answer\":           options[index][\"Answer\"],\n                \"Answer Letters\":   options[index][\"Answer Letters\"],\n                \"Question Letters\": options[index][\"Question Letters\"],\n                \"Category\":         options[index][\"Category\"],\n                \"Publisher\":        options[index][\"Publisher\"],\n                \"Series\":           options[index][\"Series\"],\n                \"Universe\":         options[index][\"Universe\"],\n                \"Difficulty\":       options[index][\"Difficulty\"]\n            }\n        } else {\n            entryData = {\n                \"Letter\":           letter,\n                \"Index\":            options[index][\"Answer\"].indexOf(letter),\n                \"Question\":         options[index][\"Question\"],\n                \"Answer\":           options[index][\"Answer\"]\n            }\n        }\n\n        entries.push(entryData);\n    });\n    return entries;\n}"]},"metadata":{},"sourceType":"module"}