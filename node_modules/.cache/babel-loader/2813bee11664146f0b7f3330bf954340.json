{"ast":null,"code":"var _jsxFileName = \"/home/pjackim/coding/personal/comicGame/src/js/Board.js\";\nimport { Component, useEffect } from \"react\";\nimport Cell from \"./Cell\";\nimport '../css/Board.css';\nimport { AddFileListener } from \"./ProcessData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const word = \"Parker\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: this.initGrid(props),\n      hasWon: false\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  initGrid(props) {\n    let data = props.boardData;\n    if (data.length <= 0) return [];\n    let width = this.props.maxWordSize;\n    let height = word.length;\n    let letters = [...word];\n    let grid = [];\n    let hintCol = parseInt(Math.random() * 100) % width;\n\n    for (let y = 0; y < height; y++) {\n      let row = [];\n\n      for (let x = 0; x < data[y][\"Answer\"].length; x++) row.push({\n        \"data\": data[y][\"Answer\"][x],\n        \"glow\": data[y][\"Answer\"][x] == word[y]\n      });\n\n      grid.push(row);\n    }\n\n    return grid;\n  }\n\n  genGridCells() {\n    let grid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.grid;\n\n    function getRow(arr, rowIdx, obj) {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: arr.map((m, i) => /*#__PURE__*/_jsxDEV(Cell, {\n          letter: m[\"data\"],\n          mode: m[\"glow\"],\n          pos: [rowIdx, i],\n          toggle: obj.toggle\n        }, `${rowIdx},${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this))\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this);\n    }\n\n    const gridCells = /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: grid.map((row, idx) => getRow(row, idx, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 27\n    }, this);\n\n    return gridCells;\n  }\n\n  toggle(pos) {\n    // It toggles the given grid position using \n    function duplicate(grid) {\n      let newGrid = grid.map(row => {\n        return [...row];\n      });\n      return newGrid;\n    }\n\n    this.setState(currSt => {\n      let newGrid = duplicate(currSt.grid);\n      const [row, col] = pos;\n\n      if (row >= 0 && row <= newGrid.length - 1 && col >= 0 && col <= newGrid.length - 1) {\n        if (newGrid[row][col]) {\n          newGrid[row][col] = \"\";\n        } else {\n          newGrid[row][col] = 1;\n        }\n      }\n\n      let hasWon = newGrid.every(row => row.every(cell => !cell));\n      return {\n        grid: newGrid,\n        hasWon: hasWon\n      };\n    });\n  }\n\n  render() {\n    AddFileListener(this.props.setData, this.setState, this.initGrid);\n    return this.state.hasWon ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-orange\",\n        children: \"you\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-blue\",\n        children: \"win\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Board-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"neon-orange\",\n          children: \"Hero\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"neon-blue\",\n          children: \"Trivia\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Board\",\n        children: this.genGridCells()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nBoard.defaultProps = {\n  maxWordSize: 6\n};\nexport default Board;","map":{"version":3,"sources":["/home/pjackim/coding/personal/comicGame/src/js/Board.js"],"names":["Component","useEffect","Cell","AddFileListener","word","Board","constructor","props","state","grid","initGrid","hasWon","toggle","bind","data","boardData","length","width","maxWordSize","height","letters","hintCol","parseInt","Math","random","y","row","x","push","genGridCells","getRow","arr","rowIdx","obj","map","m","i","gridCells","idx","pos","duplicate","newGrid","setState","currSt","col","every","cell","render","setData","defaultProps"],"mappings":"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","sourcesContent":["import { Component, useEffect } from \"react\";\nimport Cell from \"./Cell\";\nimport '../css/Board.css'\nimport { AddFileListener } from \"./ProcessData\";\n\nexport const word = \"Parker\";\n\nclass Board extends Component{\n    static defaultProps = {\n        maxWordSize: 6\n    }\n    constructor(props){\n        super(props)\n\n        this.state = {\n            grid: this.initGrid(props),\n            hasWon:false\n        }\n        this.toggle = this.toggle.bind(this)\n    }\n    initGrid(props){\n\n        let data = props.boardData;\n\n        if (data.length <= 0)\n            return [];\n\n\n        let width = this.props.maxWordSize;\n        let height = word.length;\n        let letters = [...word]\n        let grid = []\n\n        let hintCol = parseInt((Math.random() * 100)) % width;\n        for(let y = 0; y < height; y++){\n\n            let row = []            \n            for(let x=0; x < data[y][\"Answer\"].length; x++)\n                row.push(\n                    {\n                        \"data\": data[y][\"Answer\"][x],\n                        \"glow\": data[y][\"Answer\"][x] == word[y]\n                    }\n                    );\n            \n            grid.push(row)\n        }\n        return grid\n    }\n    genGridCells(grid = this.state.grid){\n        function getRow(arr, rowIdx, obj){\n            return (\n                <tr key={rowIdx}>\n                    {arr.map((m, i) => \n                    <Cell letter={m[\"data\"]} mode={m[\"glow\"]} key={`${rowIdx},${i}`} pos={[rowIdx,i]} toggle={obj.toggle}/>\n                    )\n                }\n                </tr>);\n        }\n        const gridCells = <tbody>{grid.map((row, idx) => getRow(row, idx, this))}</tbody>\n\n        return gridCells;\n    }\n    \n    toggle(pos){\n        // It toggles the given grid position using \n        function duplicate(grid){\n            let newGrid = grid.map(row=>{\n                return [...row]\n            })\n            return newGrid\n        }\n\n        this.setState(currSt=>{\n\n            let newGrid = duplicate(currSt.grid)\n            const [row, col] = pos\n\n            if ((row >= 0 && row <= newGrid.length - 1) && (col >= 0 && col <= newGrid.length - 1)){\n                if(newGrid[row][col]){\n                    newGrid[row][col]=\"\"\n                }\n                else{\n                    newGrid[row][col]=1\n                }\n            }\n\n            let hasWon = newGrid.every(row => row.every(cell => !cell))\n\n            return {\n                grid: newGrid,\n                hasWon: hasWon\n            }\n\n        })\n    }\n    \n\n        \n    render() {\n        AddFileListener(this.props.setData, this.setState, this.initGrid);\n        return (\n            this.state.hasWon\n            ? \n            <div className='winner'>\n                <div className='neon-orange'>you</div>\n                <div className='neon-blue'>win</div>\n            </div>\n            :\n            <div>\n                <div className='Board-title'>\n                    <div className='neon-orange'>Hero</div>\n                    <div className='neon-blue'>Trivia</div>\n                </div>\n                <table className='Board'>\n                    {this.genGridCells()}\n                </table>\n                \n            </div>\n        )\n    }\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}