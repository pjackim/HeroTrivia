{"ast":null,"code":"var _jsxFileName = \"/home/pjackim/coding/personal/comicGame/src/js/Board.js\";\nimport { Component, useEffect } from \"react\";\nimport Cell, { RenderCell } from \"./Cell\";\nimport '../css/Board.css';\nimport { AddFileListener } from \"./ProcessData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const word = \"Parker\";\nexport default function Board(props) {\n  var dimensions = getDimensions(props);\n  return /*#__PURE__*/_jsxDEV(RenderBoard, {\n    dimensions: dimensions,\n    word: props.word,\n    data: props.data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 13\n  }, this);\n}\n_c = Board;\n\nfunction CreateBoard(props) {\n  var board = []; // Initialize Board\n\n  for (var i = 0; i < props.dimensions[\"height\"]; i++) {\n    var temp = [];\n\n    for (var j = 0; j < props.dimensions[\"width\"]; j++) temp[j].push(Cell());\n\n    board.push(temp);\n  }\n\n  var center = parseInt(props.dimensions.width / 2);\n  console.log(board);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: board.map((arr, index) => {\n      arr.map((element, i) => {\n        /*#__PURE__*/\n        _jsxDEV(RenderCell, {\n          context: element\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this);\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = CreateBoard;\n\nfunction ToggleBoardPosition() {}\n\n_c3 = ToggleBoardPosition;\n\nfunction RenderBoard(props) {\n  // return (\n  //     state.hasWon\n  //     ? \n  //     <div className='winner'>\n  //         <div className='neon-orange'>you</div>\n  //         <div className='neon-blue'>win</div>\n  //     </div>\n  //     :\n  //     <div>\n  //         <div className='Board-title'>\n  //             <div className='neon-orange'>Hero</div>\n  //             <div className='neon-blue'>Trivia</div>\n  //         </div>\n  //         <table className='Board'>\n  //             {genGridCells()}\n  //         </table>\n  //     </div>\n  // );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-orange\",\n        children: \"Hero\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-blue\",\n        children: \"Trivia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(CreateBoard, {\n          dimensions: props.dimensions,\n          word: props.word,\n          data: props.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_c4 = RenderBoard;\n\nfunction getDimensions(props) {\n  var width,\n      height = 0;\n  height = props.word.length;\n  props.data.forEach(element => {\n    if (width < element[\"Answer\"].length) width = element[\"Answer\"].length;\n  });\n  return {\n    \"width\": width,\n    \"height\": height\n  };\n}\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"CreateBoard\");\n$RefreshReg$(_c3, \"ToggleBoardPosition\");\n$RefreshReg$(_c4, \"RenderBoard\");","map":{"version":3,"sources":["/home/pjackim/coding/personal/comicGame/src/js/Board.js"],"names":["Component","useEffect","Cell","RenderCell","AddFileListener","word","Board","props","dimensions","getDimensions","data","CreateBoard","board","i","temp","j","push","center","parseInt","width","console","log","map","arr","index","element","ToggleBoardPosition","RenderBoard","height","length","forEach"],"mappings":"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","sourcesContent":["import { Component, useEffect } from \"react\";\nimport Cell, { RenderCell } from \"./Cell\";\nimport '../css/Board.css'\nimport { AddFileListener } from \"./ProcessData\";\n\nexport const word = \"Parker\";\n\n\nexport default function Board(props) {\n    var dimensions = getDimensions(props);\n\n    return (<RenderBoard dimensions={dimensions} word={props.word} data={props.data}/>);\n}\n\nfunction CreateBoard(props) {\n    var board = [];\n\n    // Initialize Board\n    for (var i = 0; i < props.dimensions[\"height\"]; i++) {\n        var temp = [];\n\n        for (var j = 0; j < props.dimensions[\"width\"]; j++) \n            temp[j].push(Cell());\n\n        board.push(temp);\n    }\n\n    var center = parseInt(props.dimensions.width / 2);\n    console.log(board);\n    return (\n        <tr>\n            {board.map((arr, index) => {\n                arr.map((element, i) => {\n                    <RenderCell context={element}/>\n                })\n            })}\n        </tr>\n\n    );\n}\n\nfunction ToggleBoardPosition() {\n\n}\n\n\nfunction RenderBoard(props) {\n    // return (\n    //     state.hasWon\n    //     ? \n    //     <div className='winner'>\n    //         <div className='neon-orange'>you</div>\n    //         <div className='neon-blue'>win</div>\n    //     </div>\n    //     :\n    //     <div>\n    //         <div className='Board-title'>\n    //             <div className='neon-orange'>Hero</div>\n    //             <div className='neon-blue'>Trivia</div>\n    //         </div>\n    //         <table className='Board'>\n    //             {genGridCells()}\n    //         </table>\n            \n    //     </div>\n    // );\n\n    return (\n        <div>\n            <div className='Board-title'>\n                <div className='neon-orange'>Hero</div>\n                <div className='neon-blue'>Trivia</div>\n            </div>\n            <table className='Board'>\n            {/* <th></th> */}\n                <tbody>\n                    <CreateBoard dimensions={props.dimensions} word={props.word} data={props.data}/>\n                </tbody>\n            </table>\n            \n        </div>\n    );\n}\n\nfunction getDimensions(props) {\n    var width, height = 0;\n    height = props.word.length;\n\n    props.data.forEach(element => {\n        if (width < element[\"Answer\"].length)\n            width = element[\"Answer\"].length;\n    });\n    return {\"width\": width, \"height\": height};\n}"]},"metadata":{},"sourceType":"module"}