{"ast":null,"code":"var _jsxFileName = \"/home/pjackim/coding/personal/comicGame/src/js/Board.js\",\n    _s = $RefreshSig$();\n\nimport Cell, { RenderCell } from \"./Cell\";\nimport '../css/Board.css';\nimport { useState } from \"react/cjs/react.development\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  return /*#__PURE__*/_jsxDEV(RenderBoard, {\n    dimensions: getDimensions(props),\n    word: props.word,\n    data: props.data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 13\n  }, this);\n}\n_c = Board;\nexport var board = [];\n\nfunction CreateBoard(props) {\n  board = [];\n  var center = parseInt(props.dimensions.width / 2); // Initialize Board\n\n  for (var row = 0; row < props.dimensions[\"height\"]; row++) {\n    var temp = [];\n    var answer = props.data[row][\"Answer\"];\n    var hintIndex = answer.indexOf(props.data[row][\"Letter\"]);\n    var letterIndex = 0;\n    var used = false;\n\n    for (var col = 0; col < props.dimensions[\"width\"]; col++) {\n      var context = {};\n      var start = center - hintIndex;\n\n      if (col >= start && col < center + answer.length - hintIndex) {\n        context = Cell(answer[letterIndex], true, answer[letterIndex] == answer[props.data[row][\"Index\"]]);\n        letterIndex++;\n      } else context = Cell(\"\");\n\n      context.position = [row, col];\n      temp.push(context);\n    }\n\n    board.push(temp);\n  }\n\n  function getRow(arr, rowIdx) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: arr.map((m, i) => /*#__PURE__*/_jsxDEV(RenderCell, {\n        context: m\n      }, `${rowIdx},${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 36\n      }, this))\n    }, rowIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  }\n\n  const gridCells = /*#__PURE__*/_jsxDEV(\"tbody\", {\n    children: board.map((row, idx) => getRow(row, idx))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 23\n  }, this);\n\n  return gridCells;\n}\n\n_c2 = CreateBoard;\n\nfunction RenderBoard(props) {\n  _s();\n\n  // return (\n  //     state.hasWon\n  //     ? \n  //     <div className='winner'>\n  //         <div className='neon-orange'>you</div>\n  //         <div className='neon-blue'>win</div>\n  //     </div>\n  //     :\n  //     <div>\n  //         <div className='Board-title'>\n  //             <div className='neon-orange'>Hero</div>\n  //             <div className='neon-blue'>Trivia</div>\n  //         </div>\n  //         <table className='Board'>\n  //             {genGridCells()}\n  //         </table>\n  //     </div>\n  // );\n  const [hasWon, setHasWon] = useState(false);\n  const [row, setRow] = useState(0);\n  context = {\n    hasWon,\n    setHasWon,\n    row,\n    setRow\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-orange\",\n        children: \"Hero\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-blue\",\n        children: \"Trivia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(CreateBoard, {\n        dimensions: props.dimensions,\n        word: props.word,\n        data: props.data,\n        content: context\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RenderQuestion, {\n      data: props.data,\n      context: context\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RenderBoard, \"7h3rYo+mkaHHhAzqOB9GISmlZ6Q=\");\n\n_c3 = RenderBoard;\n\nfunction RenderQuestion(props) {\n  var content = props.data[props.index][\"Question\"];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Question-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Question-title\",\n      children: \"Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Question-content\",\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n\n_c4 = RenderQuestion;\n\nfunction getDimensions(props) {\n  var width = 0,\n      height = 0;\n  height = props.word.length;\n  props.data.forEach(element => {\n    if (width < element[\"Answer\"].length) width = element[\"Answer\"].length;\n  });\n  return {\n    \"width\": width * 2,\n    \"height\": height\n  };\n}\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"CreateBoard\");\n$RefreshReg$(_c3, \"RenderBoard\");\n$RefreshReg$(_c4, \"RenderQuestion\");","map":{"version":3,"sources":["/home/pjackim/coding/personal/comicGame/src/js/Board.js"],"names":["Cell","RenderCell","useState","Board","props","getDimensions","word","data","board","CreateBoard","center","parseInt","dimensions","width","row","temp","answer","hintIndex","indexOf","letterIndex","used","col","context","start","length","position","push","getRow","arr","rowIdx","map","m","i","gridCells","idx","RenderBoard","hasWon","setHasWon","setRow","RenderQuestion","content","index","height","forEach","element"],"mappings":";;;AAAA,OAAOA,IAAP,IAAeC,UAAf,QAAiC,QAAjC;AACA,OAAO,kBAAP;AACA,SAASC,QAAT,QAAyB,6BAAzB;;AAGA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACjC,sBAAQ,QAAC,WAAD;AAAa,IAAA,UAAU,EAAEC,aAAa,CAACD,KAAD,CAAtC;AAA+C,IAAA,IAAI,EAAEA,KAAK,CAACE,IAA3D;AAAiE,IAAA,IAAI,EAAEF,KAAK,CAACG;AAA7E;AAAA;AAAA;AAAA;AAAA,UAAR;AACH;KAFuBJ,K;AAIxB,OAAO,IAAIK,KAAK,GAAG,EAAZ;;AAEP,SAASC,WAAT,CAAqBL,KAArB,EAA4B;AACxBI,EAAAA,KAAK,GAAG,EAAR;AACA,MAAIE,MAAM,GAAGC,QAAQ,CAACP,KAAK,CAACQ,UAAN,CAAiBC,KAAjB,GAAyB,CAA1B,CAArB,CAFwB,CAIxB;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGV,KAAK,CAACQ,UAAN,CAAiB,QAAjB,CAAxB,EAAoDE,GAAG,EAAvD,EAA2D;AACvD,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,MAAM,GAAGZ,KAAK,CAACG,IAAN,CAAWO,GAAX,EAAgB,QAAhB,CAAb;AACA,QAAIG,SAAS,GAAGD,MAAM,CAACE,OAAP,CAAed,KAAK,CAACG,IAAN,CAAWO,GAAX,EAAgB,QAAhB,CAAf,CAAhB;AACA,QAAIK,WAAW,GAAG,CAAlB;AACA,QAAIC,IAAI,GAAG,KAAX;;AAEA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGjB,KAAK,CAACQ,UAAN,CAAiB,OAAjB,CAAxB,EAAmDS,GAAG,EAAtD,EAA0D;AACtD,UAAIC,OAAO,GAAG,EAAd;AAEA,UAAIC,KAAK,GAAGb,MAAM,GAAGO,SAArB;;AACA,UAAII,GAAG,IAAIE,KAAP,IAAgBF,GAAG,GAAIX,MAAM,GAAGM,MAAM,CAACQ,MAAhB,GAAyBP,SAApD,EAAgE;AAC5DK,QAAAA,OAAO,GAAGtB,IAAI,CAACgB,MAAM,CAACG,WAAD,CAAP,EAAsB,IAAtB,EAA4BH,MAAM,CAACG,WAAD,CAAN,IAAuBH,MAAM,CAACZ,KAAK,CAACG,IAAN,CAAWO,GAAX,EAAgB,OAAhB,CAAD,CAAzD,CAAd;AACAK,QAAAA,WAAW;AAEd,OAJD,MAKIG,OAAO,GAAGtB,IAAI,CAAC,EAAD,CAAd;;AAEJsB,MAAAA,OAAO,CAACG,QAAR,GAAmB,CAACX,GAAD,EAAMO,GAAN,CAAnB;AACAN,MAAAA,IAAI,CAACW,IAAL,CAAUJ,OAAV;AACH;;AAEDd,IAAAA,KAAK,CAACkB,IAAN,CAAWX,IAAX;AACH;;AAED,WAASY,MAAT,CAAgBC,GAAhB,EAAqBC,MAArB,EAA4B;AACxB,wBACI;AAAA,gBACKD,GAAG,CAACE,GAAJ,CAAQ,CAACC,CAAD,EAAIC,CAAJ,kBAAU,QAAC,UAAD;AAAY,QAAA,OAAO,EAAED;AAArB,SAA8B,GAAEF,MAAO,IAAGG,CAAE,EAA5C;AAAA;AAAA;AAAA;AAAA,cAAlB;AADL,OAASH,MAAT;AAAA;AAAA;AAAA;AAAA,YADJ;AAIH;;AAED,QAAMI,SAAS,gBAAG;AAAA,cAAQzB,KAAK,CAACsB,GAAN,CAAU,CAAChB,GAAD,EAAMoB,GAAN,KAAcP,MAAM,CAACb,GAAD,EAAMoB,GAAN,CAA9B;AAAR;AAAA;AAAA;AAAA;AAAA,UAAlB;;AACA,SAAOD,SAAP;AACH;;MAvCQxB,W;;AA0CT,SAAS0B,WAAT,CAAqB/B,KAArB,EAA4B;AAAA;;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,QAAM,CAACgC,MAAD,EAASC,SAAT,IAAsBnC,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACY,GAAD,EAAMwB,MAAN,IAAgBpC,QAAQ,CAAC,CAAD,CAA9B;AACAoB,EAAAA,OAAO,GAAG;AAACc,IAAAA,MAAD;AAASC,IAAAA,SAAT;AAAoBvB,IAAAA,GAApB;AAAyBwB,IAAAA;AAAzB,GAAV;AACA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAO,MAAA,SAAS,EAAC,OAAjB;AAAA,6BACI,QAAC,WAAD;AAAa,QAAA,UAAU,EAAElC,KAAK,CAACQ,UAA/B;AAA2C,QAAA,IAAI,EAAER,KAAK,CAACE,IAAvD;AAA6D,QAAA,IAAI,EAAEF,KAAK,CAACG,IAAzE;AAA+E,QAAA,OAAO,EAAEe;AAAxF;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YALJ,eAQI,QAAC,cAAD;AAAgB,MAAA,IAAI,EAAElB,KAAK,CAACG,IAA5B;AAAkC,MAAA,OAAO,EAAEe;AAA3C;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GApCQa,W;;MAAAA,W;;AAsCT,SAASI,cAAT,CAAwBnC,KAAxB,EAA+B;AAC3B,MAAIoC,OAAO,GAAGpC,KAAK,CAACG,IAAN,CAAWH,KAAK,CAACqC,KAAjB,EAAwB,UAAxB,CAAd;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,gBACKD;AADL;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;MAbQD,c;;AAgBT,SAASlC,aAAT,CAAuBD,KAAvB,EAA8B;AAC1B,MAAIS,KAAK,GAAG,CAAZ;AAAA,MAAe6B,MAAM,GAAG,CAAxB;AACAA,EAAAA,MAAM,GAAGtC,KAAK,CAACE,IAAN,CAAWkB,MAApB;AAEApB,EAAAA,KAAK,CAACG,IAAN,CAAWoC,OAAX,CAAmBC,OAAO,IAAI;AAC1B,QAAI/B,KAAK,GAAG+B,OAAO,CAAC,QAAD,CAAP,CAAkBpB,MAA9B,EACIX,KAAK,GAAG+B,OAAO,CAAC,QAAD,CAAP,CAAkBpB,MAA1B;AACP,GAHD;AAIA,SAAO;AAAC,aAASX,KAAK,GAAG,CAAlB;AAAqB,cAAU6B;AAA/B,GAAP;AACH","sourcesContent":["import Cell, { RenderCell } from \"./Cell\";\nimport '../css/Board.css'\nimport { useState } from \"react/cjs/react.development\";\n\n\nexport default function Board(props) {\n    return (<RenderBoard dimensions={getDimensions(props)} word={props.word} data={props.data}/>);\n}\n\nexport var board = [];\n\nfunction CreateBoard(props) {\n    board = [];\n    var center = parseInt(props.dimensions.width / 2);\n    \n    // Initialize Board\n    for (var row = 0; row < props.dimensions[\"height\"]; row++) {\n        var temp = [];\n        var answer = props.data[row][\"Answer\"];\n        var hintIndex = answer.indexOf(props.data[row][\"Letter\"]);\n        var letterIndex = 0;\n        var used = false;\n\n        for (var col = 0; col < props.dimensions[\"width\"]; col++) {\n            var context = {};\n            \n            var start = center - hintIndex;\n            if (col >= start && col < (center + answer.length - hintIndex)) {\n                context = Cell(answer[letterIndex], true, answer[letterIndex] == answer[props.data[row][\"Index\"]]);\n                letterIndex++;\n                \n            } else\n                context = Cell(\"\");\n\n            context.position = [row, col];\n            temp.push(context);\n        }\n\n        board.push(temp);\n    }\n\n    function getRow(arr, rowIdx){\n        return (\n            <tr key={rowIdx}>\n                {arr.map((m, i) => <RenderCell context={m} key={`${rowIdx},${i}`}/> )}\n            </tr>);\n    }\n\n    const gridCells = <tbody>{board.map((row, idx) => getRow(row, idx))}</tbody>\n    return gridCells;\n}\n\n\nfunction RenderBoard(props) {\n    // return (\n    //     state.hasWon\n    //     ? \n    //     <div className='winner'>\n    //         <div className='neon-orange'>you</div>\n    //         <div className='neon-blue'>win</div>\n    //     </div>\n    //     :\n    //     <div>\n    //         <div className='Board-title'>\n    //             <div className='neon-orange'>Hero</div>\n    //             <div className='neon-blue'>Trivia</div>\n    //         </div>\n    //         <table className='Board'>\n    //             {genGridCells()}\n    //         </table>\n            \n    //     </div>\n    // );\n\n    const [hasWon, setHasWon] = useState(false);\n    const [row, setRow] = useState(0);\n    context = {hasWon, setHasWon, row, setRow};\n    return (\n        <div>\n            <div className='Board-title'>\n                <div className='neon-orange'>Hero</div>\n                <div className='neon-blue'>Trivia</div>\n            </div>\n            <table className='Board'>\n                <CreateBoard dimensions={props.dimensions} word={props.word} data={props.data} content={context}/>\n            </table>\n            <RenderQuestion data={props.data} context={context}/>\n        </div>\n    );\n}\n\nfunction RenderQuestion(props) {\n    var content = props.data[props.index][\"Question\"];\n\n    return (\n        <div className='Question-container'>\n            <div className='Question-title'>\n                Question\n            </div>\n            <div className='Question-content'>\n                {content}\n            </div>\n        </div>\n    );\n}\n\n\nfunction getDimensions(props) {\n    var width = 0, height = 0;\n    height = props.word.length;\n\n    props.data.forEach(element => {\n        if (width < element[\"Answer\"].length)\n            width = element[\"Answer\"].length;\n    });\n    return {\"width\": width * 2, \"height\": height};\n}"]},"metadata":{},"sourceType":"module"}