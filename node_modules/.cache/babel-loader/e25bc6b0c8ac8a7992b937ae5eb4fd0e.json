{"ast":null,"code":"var _jsxFileName = \"/home/pjackim/coding/personal/comicGame/src/js/Cell.js\",\n    _s = $RefreshSig$();\n\nimport { Component, useState } from \"react\";\nimport '../css/Cell.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Cell() {\n  _s();\n\n  let pletter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"-\";\n  let pstate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let pspecial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const [state, setState] = useState(pstate);\n  const [special, setSpecial] = useState(pspecial);\n  const [letter, setLetter] = useState(pletter);\n  var position = [];\n  const context = {\n    state,\n    setState,\n    special,\n    setSpecial,\n    letter,\n    setLetter,\n    position\n  };\n  return context;\n}\n\n_s(Cell, \"PjeiJo3eyQkMeMkR8zzHdRjBVjE=\");\n\n_c = Cell;\nexport function RenderCell(props) {\n  let classes = (props.context.state ? 'Cell' : 'Space') + (props.context.special ? ' Cell-Glow' : ' Cell-Input');\n  let content = props.context.special ? '<input type=\"text\"/>' : props.context.letter;\n\n  function handleToggle(context) {\n    context.setSpecial(!context.special);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    className: classes,\n    onClick: () => {\n      handleToggle(props.context);\n    },\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"CellContent\",\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_c2 = RenderCell;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"RenderCell\");","map":{"version":3,"sources":["/home/pjackim/coding/personal/comicGame/src/js/Cell.js"],"names":["Component","useState","Cell","pletter","pstate","pspecial","state","setState","special","setSpecial","letter","setLetter","position","context","RenderCell","props","classes","content","handleToggle"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,iBAAP;;AAGA,eAAe,SAASC,IAAT,GAA+D;AAAA;;AAAA,MAAjDC,OAAiD,uEAAvC,GAAuC;AAAA,MAAlCC,MAAkC,uEAAzB,KAAyB;AAAA,MAAlBC,QAAkB,uEAAP,KAAO;AAC1E,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAACG,MAAD,CAAlC;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAACI,QAAD,CAAtC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAACE,OAAD,CAApC;AACA,MAAIS,QAAQ,GAAG,EAAf;AACA,QAAMC,OAAO,GAAG;AAACP,IAAAA,KAAD;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,OAAlB;AAA2BC,IAAAA,UAA3B;AAAuCC,IAAAA,MAAvC;AAA+CC,IAAAA,SAA/C;AAA0DC,IAAAA;AAA1D,GAAhB;AAEA,SAAOC,OAAP;AACH;;GARuBX,I;;KAAAA,I;AAYxB,OAAO,SAASY,UAAT,CAAoBC,KAApB,EAA2B;AAC9B,MAAIC,OAAO,GAAK,CAACD,KAAK,CAACF,OAAN,CAAcP,KAAd,GAAsB,MAAtB,GAA+B,OAAhC,KACCS,KAAK,CAACF,OAAN,CAAcL,OAAd,GAAwB,YAAxB,GAAuC,aADxC,CAAhB;AAGA,MAAIS,OAAO,GAAIF,KAAK,CAACF,OAAN,CAAcL,OAAd,GAAwB,sBAAxB,GAAiDO,KAAK,CAACF,OAAN,CAAcH,MAA9E;;AAEA,WAASQ,YAAT,CAAsBL,OAAtB,EAA+B;AAC3BA,IAAAA,OAAO,CAACJ,UAAR,CAAmB,CAACI,OAAO,CAACL,OAA5B;AACH;;AAED,sBACI;AAAI,IAAA,SAAS,EAAEQ,OAAf;AAAwB,IAAA,OAAO,EAAE,MAAM;AAACE,MAAAA,YAAY,CAACH,KAAK,CAACF,OAAP,CAAZ;AAA6B,KAArE;AAAA,2BACI;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA,gBACKI;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;MAjBeH,U","sourcesContent":["import { Component, useState } from \"react\";\nimport '../css/Cell.css'\n\n\nexport default function Cell(pletter = \"-\", pstate = false, pspecial = false) {\n    const [state, setState] = useState(pstate);\n    const [special, setSpecial] = useState(pspecial);\n    const [letter, setLetter] = useState(pletter);\n    var position = [];\n    const context = {state, setState, special, setSpecial, letter, setLetter, position};\n\n    return context;\n}\n\n\n\nexport function RenderCell(props) {\n    let classes =   (props.context.state ? 'Cell' : 'Space') + \n                    (props.context.special ? ' Cell-Glow' : ' Cell-Input');\n\n    let content = (props.context.special ? '<input type=\"text\"/>' : props.context.letter);\n\n    function handleToggle(context) {\n        context.setSpecial(!context.special);\n    }\n\n    return (\n        <td className={classes} onClick={() => {handleToggle(props.context);}}>\n            <p className=\"CellContent\">\n                {content}\n            </p>\n        </td>\n    )\n}"]},"metadata":{},"sourceType":"module"}