{"ast":null,"code":"var _jsxFileName = \"/home/pjackim/coding/personal/comicGame/src/js/Board.js\";\nimport { Component, useEffect } from \"react\";\nimport Cell, { RenderCell } from \"./Cell\";\nimport '../css/Board.css';\nimport { AddFileListener } from \"./ProcessData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  var dimensions = getDimensions(props);\n  return /*#__PURE__*/_jsxDEV(RenderBoard, {\n    dimensions: dimensions,\n    word: props.word,\n    data: props.data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 13\n  }, this);\n}\n_c = Board;\n\nfunction CreateBoard(props) {\n  var board = []; // Initialize Board\n\n  for (var i = 0; i < props.dimensions[\"height\"]; i++) {\n    var temp = [];\n\n    for (var j = 0; j < props.dimensions[\"width\"]; j++) temp.push(Cell());\n\n    board.push(temp);\n  }\n\n  var center = parseInt(props.dimensions.width / 2);\n\n  function getRow(arr, rowIdx) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: arr.map((m, i) => /*#__PURE__*/_jsxDEV(RenderCell, {\n        context: arr[rowIdx]\n      }, `${rowIdx},${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 36\n      }, this))\n    }, rowIdx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  }\n\n  const gridCells = /*#__PURE__*/_jsxDEV(\"tbody\", {\n    children: grid.map((row, idx) => getRow(row, idx, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 23\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: board.map((row, index) => {\n      /*#__PURE__*/\n      _jsxDEV(\"tr\", {\n        children: row.map((element, i) => /*#__PURE__*/_jsxDEV(RenderCell, {\n          context: element\n        }, `${index},${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 42\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false);\n}\n\n_c2 = CreateBoard;\n\nfunction ToggleBoardPosition() {}\n\n_c3 = ToggleBoardPosition;\n\nfunction RenderBoard(props) {\n  // return (\n  //     state.hasWon\n  //     ? \n  //     <div className='winner'>\n  //         <div className='neon-orange'>you</div>\n  //         <div className='neon-blue'>win</div>\n  //     </div>\n  //     :\n  //     <div>\n  //         <div className='Board-title'>\n  //             <div className='neon-orange'>Hero</div>\n  //             <div className='neon-blue'>Trivia</div>\n  //         </div>\n  //         <table className='Board'>\n  //             {genGridCells()}\n  //         </table>\n  //     </div>\n  // );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-orange\",\n        children: \"Hero\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-blue\",\n        children: \"Trivia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(CreateBoard, {\n        dimensions: props.dimensions,\n        word: props.word,\n        data: props.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n\n_c4 = RenderBoard;\n\nfunction getDimensions(props) {\n  var width = 0,\n      height = 0;\n  height = props.word.length;\n  props.data.forEach(element => {\n    if (width < element[\"Answer\"].length) width = element[\"Answer\"].length;\n  });\n  return {\n    \"width\": width,\n    \"height\": height\n  };\n}\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"CreateBoard\");\n$RefreshReg$(_c3, \"ToggleBoardPosition\");\n$RefreshReg$(_c4, \"RenderBoard\");","map":{"version":3,"sources":["/home/pjackim/coding/personal/comicGame/src/js/Board.js"],"names":["Component","useEffect","Cell","RenderCell","AddFileListener","Board","props","dimensions","getDimensions","word","data","CreateBoard","board","i","temp","j","push","center","parseInt","width","getRow","arr","rowIdx","map","m","gridCells","grid","row","idx","index","element","ToggleBoardPosition","RenderBoard","height","length","forEach"],"mappings":"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","sourcesContent":["import { Component, useEffect } from \"react\";\nimport Cell, { RenderCell } from \"./Cell\";\nimport '../css/Board.css'\nimport { AddFileListener } from \"./ProcessData\";\n\n\nexport default function Board(props) {\n    var dimensions = getDimensions(props);\n\n    return (<RenderBoard dimensions={dimensions} word={props.word} data={props.data}/>);\n}\n\nfunction CreateBoard(props) {\n    var board = [];\n    \n    // Initialize Board\n    for (var i = 0; i < props.dimensions[\"height\"]; i++) {\n        var temp = [];\n\n        for (var j = 0; j < props.dimensions[\"width\"]; j++) \n            temp.push(Cell());\n\n        board.push(temp);\n    }\n\n    var center = parseInt(props.dimensions.width / 2);\n    \n\n    function getRow(arr, rowIdx){\n        return (\n            <tr key={rowIdx}>\n                {arr.map((m, i) => <RenderCell context={arr[rowIdx]} key={`${rowIdx},${i}`}/> )}\n            </tr>);\n    }\n\n    const gridCells = <tbody>{grid.map((row, idx) => getRow(row, idx, this))}</tbody>\n\n    return (\n        <>            \n            {board.map((row, index) => {\n                <tr key={index}>\n                {row.map((element, i) => <RenderCell context={element} key={`${index},${i}`}/>)}\n                </tr>\n            })}\n        </>\n\n        \n\n    );\n}\n\nfunction ToggleBoardPosition() {\n\n}\n\n\nfunction RenderBoard(props) {\n    // return (\n    //     state.hasWon\n    //     ? \n    //     <div className='winner'>\n    //         <div className='neon-orange'>you</div>\n    //         <div className='neon-blue'>win</div>\n    //     </div>\n    //     :\n    //     <div>\n    //         <div className='Board-title'>\n    //             <div className='neon-orange'>Hero</div>\n    //             <div className='neon-blue'>Trivia</div>\n    //         </div>\n    //         <table className='Board'>\n    //             {genGridCells()}\n    //         </table>\n            \n    //     </div>\n    // );\n\n    return (\n        <div>\n            <div className='Board-title'>\n                <div className='neon-orange'>Hero</div>\n                <div className='neon-blue'>Trivia</div>\n            </div>\n            <table className='Board'>\n            {/* <th></th> */}\n                    <CreateBoard dimensions={props.dimensions} word={props.word} data={props.data}/>\n            </table>\n            \n        </div>\n    );\n}\n\nfunction getDimensions(props) {\n    var width = 0, height = 0;\n    height = props.word.length;\n\n    props.data.forEach(element => {\n        if (width < element[\"Answer\"].length)\n            width = element[\"Answer\"].length;\n    });\n    return {\"width\": width, \"height\": height};\n}"]},"metadata":{},"sourceType":"module"}