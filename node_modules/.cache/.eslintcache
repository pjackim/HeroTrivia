[{"/home/pjackim/coding/personal/comicGame/src/index.js":"1","/home/pjackim/coding/personal/comicGame/src/js/App.js":"2","/home/pjackim/coding/personal/comicGame/src/js/reportWebVitals.js":"3","/home/pjackim/coding/personal/comicGame/src/js/Board.js":"4","/home/pjackim/coding/personal/comicGame/src/js/Cell.js":"5","/home/pjackim/coding/personal/comicGame/src/js/ProcessData.js":"6","/home/pjackim/coding/personal/comicGame/src/data/data.js":"7"},{"size":512,"mtime":1641589038189,"results":"8","hashOfConfig":"9"},{"size":1186,"mtime":1641589038192,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1641589038192,"results":"11","hashOfConfig":"9"},{"size":3430,"mtime":1641589038192,"results":"12","hashOfConfig":"9"},{"size":1435,"mtime":1641589038192,"results":"13","hashOfConfig":"9"},{"size":3313,"mtime":1641589038192,"results":"14","hashOfConfig":"9"},{"size":41894,"mtime":1641589038202,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wt1clv",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pjackim/coding/personal/comicGame/src/index.js",[],"/home/pjackim/coding/personal/comicGame/src/js/App.js",["34","35","36"],"import { useState } from 'react';\nimport '../css/App.css';\nimport { dataBase } from '../data/data';\nimport Board from './Board';\nimport { AddFileListener, findAllEntries, SelectFile } from './ProcessData';\n\nexport var word = \"Skyler\";\n\n\n\n// // register jQuery extension\n// jQuery.extend(jQuery.expr[':'], {\n//   focusable: function (el, index, selector) {\n//       return $(el).is('a, button, :input, [tabindex]');\n//   }\n// });\n\n// $(document).on('keypress', 'input,select', function (e) {\n//   if (e.which == 13) {\n//       e.preventDefault();\n//       // Get all focusable elements on the page\n//       var $canfocus = $(':focusable');\n//       var index = $canfocus.index(document.activeElement) + 1;\n//       if (index >= $canfocus.length) index = 0;\n//       $canfocus.eq(index).focus();\n//   }\n// });\n\n\n\n\nexport default function App(props) {\n  // AddFileListener();\n\n  // Set Random Word\n  var index = parseInt(Math.random() * dataBase.length)\n  word = dataBase[index][\"Answer\"];\n  // console.log( dataBase[index][\"Answer\"]);\n\n  var data = findAllEntries(word);\n  // AddFileListener();\n  return (\n    <div className='App'>\n      <Board word={word} data={data}/>\n    </div>\n  );\n}","/home/pjackim/coding/personal/comicGame/src/js/reportWebVitals.js",[],"/home/pjackim/coding/personal/comicGame/src/js/Board.js",["37","38"],"import Cell, { RenderCell } from \"./Cell\";\nimport '../css/Board.css'\nimport { useState } from \"react/cjs/react.development\";\n\n\nexport default function Board(props) {\n    return (<RenderBoard dimensions={getDimensions(props)} word={props.word} data={props.data}/>);\n}\n\nexport var board = [];\n\nfunction CreateBoard(props) {\n    board = [];\n    var center = parseInt(props.dimensions.width / 2);\n    \n    // Initialize Board\n    for (var row = 0; row < props.dimensions[\"height\"]; row++) {\n        var temp = [];\n        var answer = props.data[row][\"Answer\"];\n        var hintIndex = answer.indexOf(props.data[row][\"Letter\"]);\n        var letterIndex = 0;\n        var used = false;\n\n        for (var col = 0; col < props.dimensions[\"width\"]; col++) {\n            var context = {};\n            \n            var start = center - hintIndex;\n            if (col >= start && col < (center + answer.length - hintIndex)) {\n                context = Cell(answer[letterIndex], true, (col - start) == props.data[row][\"Index\"]);\n                letterIndex++;\n                \n            } else\n                context = Cell(\"\");\n\n            context.position = [row, col];\n            temp.push(context);\n        }\n\n        board.push(temp);\n    }\n\n    function getRow(arr, rowIdx){\n        return (\n            <tr key={rowIdx}>\n                {arr.map((m, i) => <RenderCell setRow={props.context.setRow} context={m} key={`${rowIdx},${i}`}/> )}\n            </tr>);\n    }\n\n    const gridCells = <tbody>{board.map((row, idx) => getRow(row, idx))}</tbody>\n    return gridCells;\n}\n\n\nfunction RenderBoard(props) {\n    // return (\n    //     state.hasWon\n    //     ? \n    //     <div className='winner'>\n    //         <div className='neon-orange'>you</div>\n    //         <div className='neon-blue'>win</div>\n    //     </div>\n    //     :\n    //     <div>\n    //         <div className='Board-title'>\n    //             <div className='neon-orange'>Hero</div>\n    //             <div className='neon-blue'>Trivia</div>\n    //         </div>\n    //         <table className='Board'>\n    //             {genGridCells()}\n    //         </table>\n            \n    //     </div>\n    // );\n\n    const [hasWon, setHasWon] = useState(false);\n    const [row, setRow] = useState(0);\n    var context = {hasWon, setHasWon, row, setRow};\n    return (\n        <div>\n            <div className='Board-title'>\n                <div className='neon-orange'>Hero</div>\n                <div className='neon-blue'>Trivia</div>\n            </div>\n            <table className='Board'>\n                <CreateBoard dimensions={props.dimensions} word={props.word} data={props.data} context={context}/>\n            </table>\n            <RenderQuestion data={props.data} context={context}/>\n        </div>\n    );\n}\n\nfunction RenderQuestion(props) {\n    var content = props.data[props.context.row][\"Question\"];\n\n    return (\n        <div className='Question-container'>\n            {/* <div className='Question-title'>\n                Question\n            </div> */}\n            <div className='Question-content'>\n                {content}\n            </div>\n        </div>\n    );\n}\n\n\nfunction getDimensions(props) {\n    var width = 0, height = 0;\n    height = props.word.length;\n\n    props.data.forEach(element => {\n        if (width < element[\"Answer\"].length)\n            width = element[\"Answer\"].length;\n    });\n    return {\"width\": width * 2, \"height\": height};\n}","/home/pjackim/coding/personal/comicGame/src/js/Cell.js",["39","40"],"import { Component, useState } from \"react\";\nimport '../css/Cell.css'\n\nexport default function Cell(pletter = \"-\", pstate = false, pspecial = false) {\n    const [state, setState] = useState(pstate);\n    const [special, setSpecial] = useState(pspecial);\n    const [attemptLetter, setAttempt] = useState(\"\");\n    const [letter, setLetter] = useState(pletter);\n    var position = [];\n    const context = {state, setState, special, setSpecial, letter, setLetter, position, attemptLetter, setAttempt};\n\n    return context;\n}\n\n\n\nexport function RenderCell(props) {\n    function handleChange(e, cellContext) {\n        cellContext.setSpecial(e.target.value.toLowerCase() == cellContext.letter.toLowerCase());\n    }\n\n    function handleClick(cellContext, setRow) {\n        setRow(cellContext.position[0]);\n        console.log(\"row\", cellContext.position[0]);\n    }\n\n    let classes = '', content = '';\n    if (props.context.state) {\n        classes = 'Cell';\n        classes += (props.context.special ? ' Cell-Glow' : ' Cell-Input');\n        content = (props.context.special ?  props.context.letter : <input type=\"text\" onFocus={() => {handleClick(props.context,props.setRow)}} onChange={(e) => {handleChange(e, props.context, props.setRow);}}/>);\n    } \n    else \n        classes = 'Space';\n\n\n    return (\n        <td className={classes}>\n            <p className=\"CellContent\">\n                {content}\n            </p>\n        </td>\n    )\n}","/home/pjackim/coding/personal/comicGame/src/js/ProcessData.js",["41","42","43","44"],"import * as Papa from 'papaparse';\nimport { dataBase } from '../data/data';\nimport { word } from './Board';\n\nexport var data = [];\n\nexport function SelectFile() {\n    return (<input type=\"file\" id=\"file-selector\" accept=\".csv\"/>);\n}\n\nexport function AddFileListener() {\n    const fileSelector = document.getElementById('file-selector');\n    fileSelector.addEventListener('change', (event) => {\n      const fileList = event.target.files;\n      loadFile(fileList[0]);\n    });\n}\n\nexport async function loadFile(fileObject){\n    const reader = new FileReader();\n    reader.readAsText(fileObject, \"UTF-8\");\n    reader.onload = event => {\n\n        Papa.parse(event.target.result, {\n            header: true,\n            complete: function(CSVFilePlaces) {\n                data = CSVFilePlaces.data;\n                console.log(JSON.stringify(data, null, 2));\n                // printData([data]);\n            }\n        });\n    };\n}\n\n\n\nexport function printData(arr) {\n    arr.forEach(element => {\n        if (element[\"Question\"].length > 0)\n            console.log(JSON.stringify(element, null, 2));\n    });\n}\n\nfunction findEntries(letter) {\n    var entries = [];\n\n    dataBase.forEach(entry => {\n        let position = entry[\"Answer\"].indexOf(letter);\n\n        if (position > -1)\n            entries.push(entry);\n    });\n    return entries;\n}\n\nfunction findSmallest(count, data) {\n    var entries = [];\n\n    data.forEach(element => {\n        if (entries.length != count)\n            entries.push(element)\n        else {\n            for (var i = 0; i < entries.length; i++) {\n                if (entries[i][\"Answer\"].length > element[\"Answer\"].length)\n                    entries[i] = element;\n            }\n        }\n    });\n    return entries;\n}\n\nexport function findAllEntries(word, long = false) {\n    var entries = [];\n    var wordsUsed = [];\n\n    [...word].forEach(letter => {\n        var options = findEntries(letter);\n        var smallestElement = options[options.length - 1];\n\n        // Get Smallest word for each letter\n        var temp = findSmallest(3, options);\n\n        var index = parseInt((Math.random() * 100) % temp.length);\n        var entryData = {}\n\n        if (long) {\n            entryData = {\n                \"Letter\":           letter,\n                \"Index\":            options[index][\"Answer\"].indexOf(letter),\n                \"Question\":         options[index][\"Question\"],\n                \"Answer\":           options[index][\"Answer\"],\n                \"Answer Letters\":   options[index][\"Answer Letters\"],\n                \"Question Letters\": options[index][\"Question Letters\"],\n                \"Category\":         options[index][\"Category\"],\n                \"Publisher\":        options[index][\"Publisher\"],\n                \"Series\":           options[index][\"Series\"],\n                \"Universe\":         options[index][\"Universe\"],\n                \"Difficulty\":       options[index][\"Difficulty\"]\n            }\n        } else {\n            entryData = {\n                \"Letter\":           letter,\n                \"Index\":            options[index][\"Answer\"].indexOf(letter),\n                \"Question\":         options[index][\"Question\"],\n                \"Answer\":           options[index][\"Answer\"]\n            }\n        }\n\n        entries.push(entryData);\n    });\n    return entries;\n}","/home/pjackim/coding/personal/comicGame/src/data/data.js",[],{"ruleId":"45","severity":1,"message":"46","line":1,"column":10,"nodeType":"47","messageId":"48","endLine":1,"endColumn":18},{"ruleId":"45","severity":1,"message":"49","line":5,"column":10,"nodeType":"47","messageId":"48","endLine":5,"endColumn":25},{"ruleId":"45","severity":1,"message":"50","line":5,"column":43,"nodeType":"47","messageId":"48","endLine":5,"endColumn":53},{"ruleId":"45","severity":1,"message":"51","line":22,"column":13,"nodeType":"47","messageId":"48","endLine":22,"endColumn":17},{"ruleId":"52","severity":1,"message":"53","line":29,"column":73,"nodeType":"54","messageId":"55","endLine":29,"endColumn":75},{"ruleId":"45","severity":1,"message":"56","line":1,"column":10,"nodeType":"47","messageId":"48","endLine":1,"endColumn":19},{"ruleId":"52","severity":1,"message":"53","line":19,"column":61,"nodeType":"54","messageId":"55","endLine":19,"endColumn":63},{"ruleId":"45","severity":1,"message":"57","line":3,"column":10,"nodeType":"47","messageId":"48","endLine":3,"endColumn":14},{"ruleId":"52","severity":1,"message":"58","line":60,"column":28,"nodeType":"54","messageId":"55","endLine":60,"endColumn":30},{"ruleId":"45","severity":1,"message":"59","line":74,"column":9,"nodeType":"47","messageId":"48","endLine":74,"endColumn":18},{"ruleId":"45","severity":1,"message":"60","line":78,"column":13,"nodeType":"47","messageId":"48","endLine":78,"endColumn":28},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'AddFileListener' is defined but never used.","'SelectFile' is defined but never used.","'used' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Component' is defined but never used.","'word' is defined but never used.","Expected '!==' and instead saw '!='.","'wordsUsed' is assigned a value but never used.","'smallestElement' is assigned a value but never used."]